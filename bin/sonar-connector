#!/usr/bin/env ruby

require 'rubygems'
require 'bundler'
begin
  Bundler.setup(:default, :development)
rescue Bundler::BundlerError => e
  $stderr.puts e.message
  $stderr.puts "Run `bundle install` to install missing gems"
  exit e.status_code
end
Bundler.require

require File.join(File.dirname(__FILE__), '..', 'lib', 'sonar_connector')
require 'optparse'

config_filename = File.expand_path File.join(Dir.pwd, "config", "config.json")
mode = nil
install_path = nil

ARGV.options do |opts|
  script_name = File.basename($0)

  opts.banner = "Usage: #{script_name} OPTION"
  
  opts.separator "Run modes:"
  opts.on("--start", "Start the connector") { mode = :start }
  opts.on("--check", "Validate the connector config") { mode = :check } 
  opts.on("--install=PATH", String, "Install the connector working dir and default config to the file system") {|p|
    install_path = p
    mode = :install
  }
  opts.on("--console", "Run IRB console in connector framework environment") { mode = :console }
  
  opts.separator "Options:"
  
  opts.on("-c", "--config=FILE", String, "Override the path to the config file.") {|s| config_filename = File.expand_path s}
  
  opts.separator "Misc:"
  opts.on_tail("-v", "--version", "Show version") { mode = :version }
  opts.on_tail("-h", "--help", "Show this message")
  opts.parse!
end

case mode
when :start
  puts "Starting SONAR Connector from config file: #{config_filename}"
  connector = Sonar::Connector::Controller.new(config_filename)
  puts "Connector bootstrapped successfully, check log files for details."
  connector.start
  exit
  
when :check
  puts "Checking config file: #{config_filename}"
  Sonar::Connector::Controller.new(config_filename)
  puts "...clean."
  exit
when :install
  path = File.expand_path install_path
  
  if File.directory?(path)
    puts "Error: Directory '#{path}' already exists, aborting."
    exit(1)
  end
  
  %W{config log var}.each {|dir| FileUtils.mkdir_p File.join(path, dir)}
  FileUtils.cp File.join(Sonar::Connector::ROOT, '..', "config", "config.example.json"), File.join(path, 'config', 'config.json')
  puts "Success: Set up working directory '#{path}' and associated subdirs."
  exit
when :console
  lib_path = File.expand_path File.join(File.dirname(__FILE__), '..', 'lib')
  Kernel.system "irb -rubygems -I #{lib_path} -r sonar_connector.rb"
  exit
when :version
  version_file = File.join File.expand_path(File.dirname(__FILE__)), "..", "VERSION"
  puts "SONAR Connector Framework #{File.read(version_file)}"
  exit
else
  puts ARGV.options
end